core :: module("../modules/core");

utf16_string :: struct {
    length: u32;
    capacity: u32;
    data: ^u16;
};

utf32_string :: struct {
    length: u32;
    capacity: u32;
    data: ^u32;
};

make_string :: proc(): string {
    s: string;
    s.length   := 0;
    s.capacity := core::next_power_of_two(32);
    s.data     := alloc(s.capacity);
    return s;
};

resize_string :: proc(s: ^string, target_length: u32) {
    if s.capacity >= target_length {
        return;
    };

    s.capacity := core::next_power_of_two(target_length);

    buffer: ^u8 := alloc(s.capacity);
    fill(buffer, 0, s.capacity);
    copy(buffer, s.data, s.length);

    free(s.data);
    s.data := buffer;
};

make_cstring :: proc(s: ^string): ^u8 {
    buffer: ^u8 := alloc(s.length + 1);
    copy(buffer, s.data, s.length);
    (buffer + s.length)^ := 0;
    return buffer;
};

@binary_operator "+";
string_append :: proc(lhs: ^string, rhs: ^string) {
    resize_string(lhs, lhs.length + rhs.length);
    copy(lhs.data + lhs.length, rhs.data, rhs.length);
};

@binary_operator ":="
string_assignment_1 :: proc(lhs: ^utf16_string, rhs: string) {
    with lhs {
        .length := rhs.length;
        .capacity := core::next_power_of_two(size_of(u16) * rhs.length);
        .data := alloc(.capacity);
        fill(.data, 0, .capacity);
    };
};

@binary_operator ":="
string_assignment_2 :: proc(lhs: ^utf32_string, rhs: string) {
    with lhs {
        .length := rhs.length;
        .capacity := core::next_power_of_two(size_of(u32) * rhs.length);
        .data := alloc(.capacity);
        fill(.data, 0, .capacity);
    };
};

@binary_operator ":="
string_assignment_3 :: proc(lhs: ^string, rhs: utf32_string) {
};
