core :: module("../modules/core");

//
//

2 * 16 + (4 shl 2);

///////////////////////////////////////////////////////////////////////////////
// bool
// â‰ 

// uninitialized
bool_true_u: bool;
bool_true_u := true;

bool_false_u: bool;
bool_false_u := false;

// initialized
bool_true_i:  bool := true;
bool_false_i: bool := false;

// cast
one := 2;
three: u16 := 128;
#run {
    one := cast<u8>(three);
};

four: s16;
#run {
    four := cast<s16>(three);
};

sign_extend_src: s8 := -64;
sign_extend_dest: s16 := -32767;

#run {
    core::print("sign_extend_dest := %hd (before)\n", sign_extend_dest);
    sign_extend_dest := cast<s16>(sign_extend_src);
    core::print("sign_extend_dest := %hd (after)\n\n", sign_extend_dest);
};

zero_extend_src: u8 := $ff;
zero_extend_dest: u16;
zero_extend_dest := 65535;

#run {
    core::print("zero_extend_dest := %d (before)\n", zero_extend_dest);
    zero_extend_dest := cast<u16>(zero_extend_src);
    core::print("zero_extend_dest := %d (after)\n", zero_extend_dest);
};

E: f32 := 2.7182818284;

PI: f32;
PI := 3.1415926535;

int_pi: u32;
#run {
    int_pi := cast<u32>(PI);
    core::print("int_pi := %d\n", int_pi);
};

pi_from_casted_int := cast<f32>(int_pi);

// transmute
//
transmutation_magick: u8;
#run {
    transmutation_magick := transmute<u8>(three);
};

///////////////////////////////////////////////////////////////////////////////
// u8

// uninitialized
u8_min_u: u8;
u8_min_u := 0;
u8_min_u := $0;
u8_min_u := @0;
u8_min_u := %0000_0000;

u8_max_u: u8;
u8_max_u := 255;
u8_max_u := $ff;
u8_max_u := @377;
u8_max_u := %1111_1111;

s8_min_u: s8;
s8_min_u := -128;
s8_min_u := $80;
s8_min_u := @200;
s8_min_u := %1000_0000;

s8_max_u: s8;
s8_max_u := 127;
s8_max_u := $7f;
s8_max_u := @177;
s8_max_u := %0111_1111;

// initialized
u8_min_i1: u8 := 0;
u8_min_i2: u8 := $0;
u8_min_i3: u8 := @0;
u8_min_i4: u8 := %0000_0000;

u8_max_i1: u8 := 255;
u8_max_i2: u8 := $ff;
u8_max_i3: u8 := @377;
u8_max_i4: u8 := %1111_1111;

s8_min_i1: s8 := -128;
s8_min_i2: s8 := $80;
s8_min_i3: s8 := @200;
s8_min_i4: s8 := %1000_0000;

s8_max_i1: s8 := 127;
s8_max_i2: s8 := $7f;
s8_max_i3: s8 := @177;
s8_max_i4: s8 := %0111_1111;

///////////////////////////////////////////////////////////////////////////////
// u16

// uninitialized
u16_min_u: u16;
u16_min_u := 0;
u16_min_u := $0;
u16_min_u := @0;
u16_min_u := %0000_0000_0000_0000;

u16_max_u: u16;
u16_max_u := 65535;
u16_max_u := $ffff;
u16_max_u := @177777;
u16_max_u := %1111_1111_1111_1111;

s16_min_u: s16;
s16_min_u := -32768;
s16_min_u := $8000;
s16_min_u := @100000;
s16_min_u := %1000_0000_0000_0000;

s16_max_u: s16;
s16_max_u := 32767;
s16_max_u := $7fff;
s16_max_u := @77777;
s16_max_u := %0111_1111_1111_1111;

// initialized
u16_min_i1: u16 := 0;
u16_min_i2: u16 := $0;
u16_min_i3: u16 := @0;
u16_min_i4: u16 := %0000_0000_0000_0000;

u16_max_i1: u16 := 65535;
u16_max_i2: u16 := $ffff;
u16_max_i3: u16 := @177777;
u16_max_i4: u16 := %1111_1111_1111_1111;

s16_min_i1: s16 := -32768;
s16_min_i2: s16 := $8000;
s16_min_i3: s16 := @100000;
s16_min_i4: s16 := %1000_0000_0000_0000;

s16_max_i1: s16 := 32767;
s16_max_i2: s16 := $7fff;
s16_max_i3: s16 := @77777;
s16_max_i4: s16 := %0111_1111_1111_1111;

///////////////////////////////////////////////////////////////////////////////
// u32

// uninitialized
u32_min_u: u32;
u32_min_u := 0;
u32_min_u := $0;
u32_min_u := @0;
u32_min_u := %0000_0000_0000_0000;

u32_max_u: u32;
u32_max_u := 4_294_967_295;
u32_max_u := $FFFFFFFF;
u32_max_u := @37777777777;
u32_max_u := %1111_1111_1111_1111_1111_1111_1111_1111;

s32_min_u: s32;
s32_min_u := -2_147_483_648;
s32_min_u := $80000001;
s32_min_u := @20000000001;
s32_min_u := %1000_0000_0000_0000_0000_0000_0000_0001;

s32_max_u: s32;
s32_max_u := 2_147_483_647;
s32_max_u := $7FFFFFFF;
s32_max_u := @17777777777;
s32_max_u := %0111_1111_1111_1111_1111_1111_1111_1111;

// initialized
u32_min_i1: u32 := 0;
u32_min_i2: u32 := $0;
u32_min_i3: u32 := @0;
u32_min_i4: u32 := %0000_0000_0000_0000;

u32_max_i1: u32 := 4_294_967_295;
u32_max_i2: u32 := $FFFFFFFF;
u32_max_i3: u32 := @37777777777;
u32_max_i4: u32 := %1111_1111_1111_1111_1111_1111_1111_1111;

s32_min_i1: s32 := -2_147_483_648;
s32_min_i2: s32 := $80000001;
s32_min_i3: s32 := @20000000001;
s32_min_i4: s32 := %1000_0000_0000_0000_0000_0000_0000_0001;

s32_max_i1: s32 := 2_147_483_647;
s32_max_i2: s32 := $7FFFFFFF;
s32_max_i3: s32 := @17777777777;
s32_max_i4: s32 := %0111_1111_1111_1111_1111_1111_1111_1111;

///////////////////////////////////////////////////////////////////////////////
// u64

// uninitialized
u64_min_u: u64;
u64_min_u := 0;
u64_min_u := $0;
u64_min_u := @0;
u64_min_u := %0000_0000_0000_0000;

u64_max_u: u64;
u64_max_u := 18_446_744_073_709_551_615;
u64_max_u := $FFFFFFFFFFFFFFFF;
u64_max_u := @1777777777777777777777;
u64_max_u := %1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111;

s64_min_u: s64;
s64_min_u := -9_223_372_036_854_775_806;
s64_min_u := $8000000000000001;
s64_min_u := @1000000000000000000001;
s64_min_u := %1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001;

s64_max_u: s64;
s64_max_u := 9_223_372_036_854_775_807;
s64_max_u := $7FFFFFFFFFFFFFFF;
s64_max_u := @777777777777777777777;
s64_max_u := %0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111;

// initialized
u64_min_i1: u64 := 0;
u64_min_i2: u64 := $0;
u64_min_i3: u64 := @0;
u64_min_i4: u64 := %0000_0000_0000_0000;

u64_max_i1: u64 := 18_446_744_073_709_551_615;
u64_max_i2: u64 := $FFFFFFFFFFFFFFFF;
u64_max_i3: u64 := @1777777777777777777777;
u64_max_i4: u64 := %1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111;

s64_min_i1: s64 := -9_223_372_036_854_775_806;
s64_min_i2: s64 := $8000000000000001;
s64_min_i3: s64 := @1000000000000000000001;
s64_min_i4: s64 := %1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001;

s64_max_i1: s64 := 9_223_372_036_854_775_807;
s64_max_i2: s64 := $7FFFFFFFFFFFFFFF;
s64_max_i3: s64 := @777777777777777777777;
s64_max_i4: s64 := %0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111;

///////////////////////////////////////////////////////////////////////////////
// f32

#run {
    f32_min_u: f32;
    f32_min_u := 3.1415926535; // pi
};

///////////////////////////////////////////////////////////////////////////////
// f64

#run {
    f64_min_u: f64;
    f64_min_u := cast<f64>(2.7182818284); // e
};
